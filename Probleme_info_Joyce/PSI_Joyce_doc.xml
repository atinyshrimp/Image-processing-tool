<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PSI_Joyce</name>
    </assembly>
    <members>
        <member name="T:PSI_Joyce.Complexe">
            <summary>
            Classe servant à manipuler les nombres complexes, à utiliser lors de la création de la fractale
            </summary>
        </member>
        <member name="P:PSI_Joyce.Complexe.Real">
            <summary>
            Partie réelle du nombre complexe courant
            </summary>
        </member>
        <member name="P:PSI_Joyce.Complexe.Imaginary">
            <summary>
            Partie imaginary du nombre complexe courant
            </summary>
        </member>
        <member name="P:PSI_Joyce.Complexe.Module">
            <summary>
            Module du nombre complexe
            </summary>
        </member>
        <member name="P:PSI_Joyce.Complexe.Sinh">
            <summary>
            Sinus hyperbolique du nombre complexe
            </summary>
        </member>
        <member name="P:PSI_Joyce.Complexe.Sin">
            <summary>
            Sinus du nombre complexe
            </summary>
        </member>
        <member name="M:PSI_Joyce.Complexe.#ctor(System.Single,System.Single)">
            <summary>
            Crée une instance de Complexe grâce aux parties fournies
            </summary>
            <param name="real">Partie réelle du nombre complexe</param>
            <param name="imaginary">Partie imaginary du nombre complexe</param>
        </member>
        <member name="M:PSI_Joyce.Complexe.Pow(System.Int32)">
            <summary>
            Applique une puissance entière au nombre complexe de l'instance courante
            </summary>
            <param name="power">Puissance à appliquer</param>
            <returns>Un Complexe correspondant au Complexe de base à la power-ième puissance</returns>
        </member>
        <member name="M:PSI_Joyce.Complexe.op_Multiply(PSI_Joyce.Complexe,PSI_Joyce.Complexe)">
            <summary>
            Multiplie deux nombres complexes entre eux
            </summary>
            <param name="a">Premier terme de la multiplication</param>
            <param name="b">Deuxième terme de la multiplication</param>
            <returns>Produit des deux nombres complexes</returns>
        </member>
        <member name="M:PSI_Joyce.Complexe.op_Division(PSI_Joyce.Complexe,PSI_Joyce.Complexe)">
            <summary>
            Applique la division à deux nombres complexes
            </summary>
            <param name="a">Premier terme de la division</param>
            <param name="b">Deuxième terme de la division</param>
            <returns>Quotient des deux nombres complexes</returns>
        </member>
        <member name="M:PSI_Joyce.Complexe.op_Division(PSI_Joyce.Complexe,System.Int32)">
            <summary>
            Divise un nombre complexe par un entier
            </summary>
            <param name="a">Premier terme de la division</param>
            <param name="b">Deuxième terme de la division</param>
            <returns>Quotient du Complexe a par l'entier b</returns>
        </member>
        <member name="M:PSI_Joyce.Complexe.op_Addition(PSI_Joyce.Complexe,PSI_Joyce.Complexe)">
            <summary>
            Additionne deux nombres complexes entre eux
            </summary>
            <param name="a">Premier terme de l'addition</param>
            <param name="b">Deuxième terme de l'addition</param>
            <returns>Somme des deux nombres complexes</returns>
        </member>
        <member name="M:PSI_Joyce.Complexe.op_Addition(PSI_Joyce.Complexe,System.Int32)">
            <summary>
            Aditionne un entier à un nombre complexe
            </summary>
            <param name="a">Premier terme de l'addition</param>
            <param name="b">Deuxième terme de l'addition</param>
            <returns>Somme du Complexe a avec l'entier b</returns>
        </member>
        <member name="M:PSI_Joyce.Complexe.op_Subtraction(PSI_Joyce.Complexe,PSI_Joyce.Complexe)">
            <summary>
            Soustrait deux nombres complexes entre eux
            </summary>
            <param name="a">Premier terme de la soustraction</param>
            <param name="b">Deuxième terme de la soustraction</param>
            <returns>Complexe correspondant à la différence du Complexe a et du Complexe b</returns>
        </member>
        <member name="T:PSI_Joyce.Convolution">
            <summary>
            Classe répertoriant les matrices de convolution utilisées pour le traitement d'image fait dans la classe MyImage
            </summary>
        </member>
        <member name="P:PSI_Joyce.Convolution.Blur">
            <summary>
            
            </summary>
        </member>
        <member name="P:PSI_Joyce.Convolution.Sharpen">
            <summary>
            
            </summary>
        </member>
        <member name="P:PSI_Joyce.Convolution.EdgeDetect">
            <summary>
            
            </summary>
        </member>
        <member name="P:PSI_Joyce.Convolution.EdgeDetectBis">
            <summary>
            
            </summary>
        </member>
        <member name="P:PSI_Joyce.Convolution.Embossing">
            <summary>
            
            </summary>
        </member>
        <member name="P:PSI_Joyce.Convolution.Identity">
            <summary>
            
            </summary>
        </member>
        <member name="T:PSI_Joyce.HeaderInfo">
            <summary>
            Classe contenant toutes les informations des entêtes d'un fichier bitmap
            </summary>
        </member>
        <member name="P:PSI_Joyce.HeaderInfo.Size">
            <summary>
            Taille du fichier Bitmap (entêtes incluses)
            </summary>
        </member>
        <member name="P:PSI_Joyce.HeaderInfo.SizeOffset">
            <summary>
            L'indice où commence le bitmap de l'image
            </summary>
        </member>
        <member name="P:PSI_Joyce.HeaderInfo.Height">
            <summary>
            Hauteur de l'image (en pixel)
            </summary>
        </member>
        <member name="P:PSI_Joyce.HeaderInfo.Width">
            <summary>
            Largeur de l'image (en pixel)
            </summary>
        </member>
        <member name="P:PSI_Joyce.HeaderInfo.Padding">
            <summary>
            Nombre de 0 à compter pour enregistrer l'image adéqueatement au format Bitmap
            </summary>
        </member>
        <member name="P:PSI_Joyce.HeaderInfo.Array">
            <summary>
            Tableau de bytes contenant tous les bytes des en-têtes du fichier bitmap
            </summary>
        </member>
        <member name="M:PSI_Joyce.HeaderInfo.#ctor(System.String)">
            <summary>
            Création de l'entête d'une image à partir de son chemin
            </summary>
            <param name="file">Chemin menant au fichier .bmp à partir duquel l'entête sera créée</param>
        </member>
        <member name="M:PSI_Joyce.HeaderInfo.#ctor(PSI_Joyce.Pixel[0:,0:])">
            <summary>
            Création de l'entête d'une image à partir d'une matrice de Pixel
            </summary>
            <param name="pxm"></param>
        </member>
        <member name="T:PSI_Joyce.MyImage">
            <summary>
            Classe reprenant le principe de la classe Bitmap de Microsoft
            </summary>
        </member>
        <member name="P:PSI_Joyce.MyImage.Header">
            <summary>
            Classe regroupant toutes les informations de l'entête (54 premiers bytes) du fichier .bmp
            </summary>
        </member>
        <member name="P:PSI_Joyce.MyImage.Image">
            <summary>
            Image retranscrite en matrice de pixels
            </summary>
        </member>
        <member name="M:PSI_Joyce.MyImage.#ctor(System.String)">
            <summary>
            Construit une instance d'objet MyImage à partir d'un fichier
            </summary>
            <param name="file">fichier bitmap (.bmp) servant de base à la création de l'instance</param>
        </member>
        <member name="M:PSI_Joyce.MyImage.#ctor(PSI_Joyce.Pixel[0:,0:])">
            <summary>
            Crée une instance de MyImage à partir d'une matrice de Pixel
            </summary>
            <param name="pxm">Matrice de Pixel correspond à une photo</param>
        </member>
        <member name="M:PSI_Joyce.MyImage.FromImageToFile(System.String)">
            <summary>
            Enregistre l'image, à la suite des modifications potentiellement apportées, dans un dossier de l'ordinateur
            </summary>
            <param name="file">Chemin sous lequel il faudra sauvegarder l'image</param>
        </member>
        <member name="M:PSI_Joyce.MyImage.EndianToInt(System.Byte[])">
            <summary>
            Convertit le tableau de bytes passé en paramètres en entier
            </summary>
            <param name="tab"></param>
            <returns></returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.IntToEndian(System.Int32,System.Int32)">
            <summary>
            Convertit un entier en tableau de bytes
            </summary>
            <param name="val">Entier à convertir</param>
            <param name="length">Longueur du tableau voulu (soit 2, soit 4)</param>
            <returns></returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.FillBinary(System.String,System.Int32)">
            <summary>
            Remplit à gauche une chaîne de caractères représentant un nombre binaire
            </summary>
            <param name="bin">Le nombre binaire à remplir</param>
            <param name="length">Nombre total de bits voulus</param>
            <returns></returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.Greyscale">
            <summary>
            Rend l'instance de MyImage en naunces de gris
            </summary>
            <returns>une matrice de Pixel, chacun correspondant à une nuance de gris</returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.BlackAndWhite">
            <summary>
            Affiche l'image courante en noir et blanc
            </summary>
            <returns>Matrice de Pixel où chacun des Pixels est soit noir, soit blanc</returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.Negative">
            <summary>
            Inverse les couleurs de l'image courante
            </summary>
            <returns>Matrice de Pixels où chaque pixel est la couleur négative du pixel originale</returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.Mirror">
            <summary>
            Flip l'image diagonalement
            </summary>
            <returns></returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.MirrorX">
            <summary>
            Flip l'image en ayant en référence l'axe des x
            </summary>
            <returns>Matrice de Pixel symétrique à celle de l'instance courante par rapport à l'axe des abscisses</returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.MirrorY">
            <summary>
            Flip l'image avec l'axe des y comme référence
            </summary>
            <returns>Matrice de Pixel symétrique à celle de l'instance courante par rapport à l'axe des ordonnées</returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.Scale(System.Single)">
            <summary>
            Agrandit ou rétrécit l'image courante en fonction du facteur passé en paramètre
            </summary>
            <param name="ratio">facteur d'agrandissement/de rétrécissement : float strictement supérieur à 0</param>
            <returns>Matrice de Pixel agrandie si ratio > 1 et rétrécie si ratio est compris entre 0 et 1</returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.Rotate(System.Int32)">
            <summary>
            Exécute la matrice de Pixel de l'instance courante de MyImage, dans le sens horaire (+) et anti-horaire (-)
            </summary>
            <param name="angle">angle (en degré) à utiliser lors de la rotation (négatif pour le sens horaire)</param>
            <returns></returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.Convolve(System.Single[0:,0:])">
            <summary>
            Applique une convolution sur l'image de l'instance courante
            </summary>
            <param name="filtre">Noyau à utiliser lors de la convolution</param>
            <returns></returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.Blur">
            <summary>
            Applique un effet flou sur l'image courante
            </summary>
            <returns></returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.EdgeDetection">
            <summary>
            Applique l'effet "détection des bords" sur l'image courante
            </summary>
            <returns></returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.Sharpening">
            <summary>
            Applique l'effet "Sharpening" sur l'image courante
            </summary>
            <returns>Matrice de Pixel correspondant à une image plus nette que l'originale</returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.Embossing">
            <summary>
            Renforce les bords d'une image
            </summary>
            <returns></returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.Histogram">
            <summary>
            Génère un histogramme de toutes les couleurs de l'image
            </summary>
            <returns>Matrice de pixels représentant un histogramme RGB d'une image</returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.Histogram(System.String)">
            <summary>
            Génère un histogramme basé sur l'image de l'instance courante et la couleur soumise
            </summary>
            <param name="color">Couleur sur laquelle l'histogramme sera basé</param>
            <returns></returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.EncodeImage(PSI_Joyce.Pixel[0:,0:])">
            <summary>
            Cache une image dans une autre
            </summary>
            <param name="mat">Image à masquer dans l'instance actuelle</param>
            <returns></returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.DecodeImage">
            <summary>
            Récupère une image cachée dans une autre, s'il y en a une
            </summary>
            <returns>L'image cachée dans l'instance courante</returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.Fractal(System.String)">
            <summary>
            Génère une fractale parmi une sélection
            </summary>
            <param name="type">type de la fractale voulue</param>
            <returns>Image (matrice de pixels) représentant une fractale</returns>
        </member>
        <member name="T:PSI_Joyce.Pixel">
            <summary>
            Classe gérant le fonctionnement des pixels
            </summary>
        </member>
        <member name="P:PSI_Joyce.Pixel.Red">
            <summary>
            Composante rouge du Pixel
            </summary>
        </member>
        <member name="P:PSI_Joyce.Pixel.Green">
            <summary>
            Composante verte du Pixel
            </summary>
        </member>
        <member name="P:PSI_Joyce.Pixel.Blue">
            <summary>
            Composante bleue du Pixel
            </summary>
        </member>
        <member name="P:PSI_Joyce.Pixel.Avrg">
            <summary>
            La moyenne des trois composantes
            </summary>
        </member>
        <member name="P:PSI_Joyce.Pixel.Item(System.Int32)">
            <summary>
            Indexation de la classe Pixel
            </summary>
            <param name="n">0 : Composante rouge; 1 : Verte; 2 : Bleue</param>
            <returns>Byte correspondant à la composante selectionnée</returns>
        </member>
        <member name="P:PSI_Joyce.Pixel.Black">
            <summary>
            Pixel représentant la couleur noire
            </summary>
        </member>
        <member name="P:PSI_Joyce.Pixel.White">
            <summary>
            Pixel représentant la couleur blanche
            </summary>
        </member>
        <member name="P:PSI_Joyce.Pixel.BlueColor">
            <summary>
            Pixel représentant la couleur bleue
            </summary>
        </member>
        <member name="M:PSI_Joyce.Pixel.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Construit un Pixel, triplet de bytes correspondant aux composantes rouge, verte et bleu d'une couleur
            </summary>
            <param name="red">Composante rouge du Pixel, comprise entre 0 et 255</param>
            <param name="green">Composante verte du Pixel, comprise entre 0 et 255</param>
            <param name="blue">Composante bleue du Pixel, comprise entre 0 et 255</param>
        </member>
        <member name="M:PSI_Joyce.Pixel.op_Equality(PSI_Joyce.Pixel,PSI_Joyce.Pixel)">
            <summary>
            Vérifie si deux instances de Pixel sont égales
            </summary>
            <param name="a">Premier pixel (comparateur)</param>
            <param name="b">Deuxième pixel (comparé)</param>
            <returns>True si les deux Pixels sont les mêmes, False sinon</returns>
        </member>
        <member name="M:PSI_Joyce.Pixel.op_Inequality(PSI_Joyce.Pixel,PSI_Joyce.Pixel)">
            <summary>
            Vérifie si deux instances de Pixel sont différentes
            </summary>
            <param name="a">Premier pixel (comparateur)</param>
            <param name="b">Deuxième pixel (comparé)</param>
            <returns>True si les deux Pixels sont différents, False sinon</returns>
        </member>
        <member name="M:PSI_Joyce.Pixel.ReadPixel(System.Collections.Generic.Queue{System.Byte})">
            <summary>
            
            </summary>
            <param name="queue">Queue contenant tous les bytes de l'image bitmap</param>
            <returns>Pixel correspondant aux trois premiers bytes dans la Queue passée en paramètres</returns>
        </member>
        <member name="M:PSI_Joyce.Pixel.XOR(PSI_Joyce.Pixel,PSI_Joyce.Pixel)">
            <summary>
            Applique l'opération logique "Ou exclusif"
            </summary>
            <param name="a">Première entrée</param>
            <param name="b">Deuxième entrée</param>
            <returns>Pixel noir si les deux entrées sont différentes, Pixel blanc sinon</returns>
        </member>
        <member name="M:PSI_Joyce.Pixel.Grayscale">
            <summary>
            Colore le Pixel courant en nuance de gris
            </summary>
            <returns>Pixel grisé</returns>
        </member>
        <member name="M:PSI_Joyce.Pixel.Negative">
            <summary>
            Applique l'effet "Négatif" à l'instance courante de Pixel
            </summary>
            <returns>Pixel correspondant à la couleur inverse du Pixel de base</returns>
        </member>
        <member name="T:PSI_Joyce.Program">
            <summary>
            
            </summary>
        </member>
        <member name="M:PSI_Joyce.Program.AfficheTableau(System.Byte[])">
            <summary>
            Affiche un tableau de bytes (méthode utilisée dans les tests)
            </summary>
            <param name="tab">tableau de bytes à afficher</param>
            <returns></returns>
        </member>
        <member name="M:PSI_Joyce.Program.AfficheTableau(System.String[])">
            <summary>
            Affiche un tableau de string (méthode utilisée dans les tests)
            </summary>
            <param name="tab">tableau de chaînes de caractères à afficher</param>
            <returns></returns>
        </member>
        <member name="T:PSI_Joyce.QRCode">
            <summary>
            Classe gérant le fonctionnement d'un QRCode
            </summary>
        </member>
        <member name="P:PSI_Joyce.QRCode.Character">
            <summary>
            Ensemble des caractères pris en compte par le mode alphanumérique
            </summary>
        </member>
        <member name="P:PSI_Joyce.QRCode.Code">
            <summary>
            Image du QR Code final
            </summary>
        </member>
        <member name="P:PSI_Joyce.QRCode.BitChain">
            <summary>
            Ensemble des bits à encoder dans l'image finale à retourner
            </summary>
        </member>
        <member name="P:PSI_Joyce.QRCode.Mask">
            <summary>
            Matrice de Pixels correspondant au masque à appliquer au QRCode
            </summary>
        </member>
        <member name="M:PSI_Joyce.QRCode.#ctor(System.String)">
            <summary>
            Crée une instance de QR Code à partir d'une chaîne de caractères
            </summary>
            <param name="data">Mot à convertir en QR Code</param>
        </member>
        <member name="M:PSI_Joyce.QRCode.FindIndex(System.Char)">
            <summary>
            Cherche à quel index la lettre passée en paramètres se trouve dans le tableau de caractères disponibles dans le mode alphanumérique
            </summary>
            <param name="lettre">Caractère à chercher dans le tabelau</param>
            <returns>Un entier correspondant à la place occupée par la lettre</returns>
        </member>
        <member name="M:PSI_Joyce.QRCode.GetPairs">
            <summary>
            Sépare le mot à retranscrire en QRCode en paires
            </summary>
            <returns>Tableau de string où chaque index contient une chaîne de deux caractères (ou un seul pour le dernier index en fonction des cas)</returns>
        </member>
        <member name="M:PSI_Joyce.QRCode.Binary(System.String)">
            <summary>
            Donne le nombre binaire correspondant à la paire de caractères passée en paramètres
            </summary>
            <param name="pair">Deux caractères à "traduire" en base 2</param>
            <returns></returns>
        </member>
        <member name="M:PSI_Joyce.QRCode.PrintCode">
            <summary>
            Applique un Padding de un Pixel au QRCode
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
