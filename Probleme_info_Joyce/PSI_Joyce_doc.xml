<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PSI_Joyce</name>
    </assembly>
    <members>
        <member name="T:PSI_Joyce.Complex">
            <summary>
            Class used to manipulate complex numbers, to be used when creating the fractal
            </summary>
        </member>
        <member name="P:PSI_Joyce.Complex.Real">
            <summary>
            Real part of the current complex number
            </summary>
        </member>
        <member name="P:PSI_Joyce.Complex.Imaginary">
            <summary>
            Imaginary part of the current complex number
            </summary>
        </member>
        <member name="P:PSI_Joyce.Complex.Module">
            <summary>
            Module of the current complex number
            </summary>
        </member>
        <member name="P:PSI_Joyce.Complex.Sinh">
            <summary>
            Hyperbolic sine of the complex number
            </summary>
        </member>
        <member name="P:PSI_Joyce.Complex.Sin">
            <summary>
            Sine of the current complex number
            </summary>
        </member>
        <member name="M:PSI_Joyce.Complex.#ctor(System.Single,System.Single)">
            <summary>
            Create an instance of Complex using the provided parts
            </summary>
            <param name="real">Real part of the complex number</param>
            <param name="imaginary">Imaginary part of the complex number</param>
        </member>
        <member name="M:PSI_Joyce.Complex.Pow(System.Int32)">
            <summary>
            Applies an integer power to the complex number of the current instance
            </summary>
            <param name="power">Power to apply</param>
            <returns>A Complex object corresponding to the original Complex to the power-th power</returns>
        </member>
        <member name="M:PSI_Joyce.Complex.op_Multiply(PSI_Joyce.Complex,PSI_Joyce.Complex)">
            <summary>
            Multiply two Complex numbers together
            </summary>
            <param name="a">Multiplier</param>
            <param name="b">Multiplicand</param>
            <returns>Product of the two Complex objects</returns>
        </member>
        <member name="M:PSI_Joyce.Complex.op_Division(PSI_Joyce.Complex,PSI_Joyce.Complex)">
            <summary>
            Applies division to two Complex numbers
            </summary>
            <param name="a">Dividend</param>
            <param name="b">Divisor</param>
            <returns>Quotient of the two Complex objects</returns>
        </member>
        <member name="M:PSI_Joyce.Complex.op_Division(PSI_Joyce.Complex,System.Int32)">
            <summary>
            Divide a complex number by an integer
            </summary>
            <param name="a">Complex dividend</param>
            <param name="b">Integer divisor</param>
            <returns>Quotient of Complex a by the integer b</returns>
        </member>
        <member name="M:PSI_Joyce.Complex.op_Addition(PSI_Joyce.Complex,PSI_Joyce.Complex)">
            <summary>
            Adds two Complex numbers together
            </summary>
            <param name="a">First term of the addition</param>
            <param name="b">Second term of the addition</param>
            <returns>Sum of the two Complex objects</returns>
        </member>
        <member name="M:PSI_Joyce.Complex.op_Addition(PSI_Joyce.Complex,System.Int32)">
            <summary>
            Adds an integer to a complex number
            </summary>
            <param name="a">Complex term of the addition</param>
            <param name="b">Integer term of the addition</param>
            <returns>Sum of Complex a with the integer b</returns>
        </member>
        <member name="M:PSI_Joyce.Complex.op_Subtraction(PSI_Joyce.Complex,PSI_Joyce.Complex)">
            <summary>
            Subtract two Complex numbers from each other
            </summary>
            <param name="a">Minuend</param>
            <param name="b">Subtrahend</param>
            <returns>Complex corresponding to the difference of Complex a and Complex b</returns>
        </member>
        <member name="T:PSI_Joyce.Convolution">
            <summary>
            Classe répertoriant les matrices de convolution utilisées pour le traitement d'image fait dans la classe MyImage
            </summary>
        </member>
        <member name="P:PSI_Joyce.Convolution.Blur">
            <summary>
            
            </summary>
        </member>
        <member name="P:PSI_Joyce.Convolution.Sharpen">
            <summary>
            
            </summary>
        </member>
        <member name="P:PSI_Joyce.Convolution.EdgeDetect">
            <summary>
            
            </summary>
        </member>
        <member name="P:PSI_Joyce.Convolution.EdgeDetectBis">
            <summary>
            
            </summary>
        </member>
        <member name="P:PSI_Joyce.Convolution.Embossing">
            <summary>
            
            </summary>
        </member>
        <member name="P:PSI_Joyce.Convolution.Identity">
            <summary>
            
            </summary>
        </member>
        <member name="T:PSI_Joyce.HeaderInfo">
            <summary>
            Class containing all header information of a bitmap file
            </summary>
        </member>
        <member name="P:PSI_Joyce.HeaderInfo.Size">
            <summary>
            Bitmap file size (including headers)
            </summary>
        </member>
        <member name="P:PSI_Joyce.HeaderInfo.SizeOffset">
            <summary>
            The index where the bitmap of the image begins (54 in most cases)
            </summary>
        </member>
        <member name="P:PSI_Joyce.HeaderInfo.Height">
            <summary>
            Height of the image, given in pixels
            </summary>
        </member>
        <member name="P:PSI_Joyce.HeaderInfo.Width">
            <summary>
            Width of the image, given in pixels
            </summary>
        </member>
        <member name="P:PSI_Joyce.HeaderInfo.Padding">
            <summary>
            Number of 0s to count to save the image properly in Bitmap file format
            </summary>
        </member>
        <member name="P:PSI_Joyce.HeaderInfo.Array">
            <summary>
            Byte array containing all header bytes of the bitmap file
            </summary>
        </member>
        <member name="M:PSI_Joyce.HeaderInfo.#ctor(System.String)">
            <summary>
            Creating the header of an image from its path
            </summary>
            <param name="file">Path leading to the .bmp file from which the header will be created</param>
        </member>
        <member name="M:PSI_Joyce.HeaderInfo.#ctor(PSI_Joyce.Pixel[0:,0:])">
            <summary>
            Creation of the header of an image from a Pixel matrix
            </summary>
            <param name="pxm">Pixel array representing an image</param>
            
        </member>
        <member name="T:PSI_Joyce.MyImage">
            <summary>
            Class recreating the principle of Microsoft's Bitmap class
            </summary>
        </member>
        <member name="P:PSI_Joyce.MyImage.Header">
            <summary>
            Class grouping all the header information (first 54 bytes) of the .bmp file
            </summary>
        </member>
        <member name="P:PSI_Joyce.MyImage.Image">
            <summary>
            Image transcribed into a Pixel matrix
            </summary>
        </member>
        <member name="M:PSI_Joyce.MyImage.#ctor(System.String)">
            <summary>
            Creates a MyImage object from a file
            </summary>
            <param name="file">bitmap file (.bmp) serving as the basis for creating the instance</param>
        </member>
        <member name="M:PSI_Joyce.MyImage.#ctor(PSI_Joyce.Pixel[0:,0:])">
            <summary>
            Creates an instance of MyImage from a Pixel array
            </summary>
            <param name="pxm">Pixel matrix corresponding to an image</param>
        </member>
        <member name="M:PSI_Joyce.MyImage.FromImageToFile(System.String)">
            <summary>
            Saves the image, following any changes made, to a folder on the computer
            </summary>
            <param name="file">Path under which to save the image</param>
        </member>
        <member name="M:PSI_Joyce.MyImage.EndianToInt(System.Byte[])">
            <summary>
            Convert the passed array of bytes into an integer
            </summary>
            <param name="tab">Byte array to convert</param>
            <returns></returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.IntToEndian(System.Int32,System.Int32)">
            <summary>
            Convert an integer to an array of bytes
            </summary>
            <param name="val">Integer to convert</param>
            <param name="length">Length of the wanted array (either 2 or 4)</param>
            <returns></returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.FillBinary(System.String,System.Int32)">
            <summary>
            Fills a string representing a binary number with 0s on the left
            </summary>
            <param name="bin">The binary number to fill</param>
            <param name="length">Total number of bits wanted</param>
            <returns></returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.Greyscale">
            <summary>
            Makes instance of MyImage grayscale
            </summary>
            <returns>a matrix of Pixels, each Pixel corresponding to a shade of gray</returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.BlackAndWhite">
            <summary>
            Turns the current image in black and white
            </summary>
            <returns>Pixel Matrix where each Pixel is either black or white</returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.Negative">
            <summary>
            Reverses the colors of the current image
            </summary>
            <returns>Pixel Matrix where each pixel is the negative color of the original pixel</returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.Mirror">
            <summary>
            Flips the image diagonally
            </summary>
            <returns></returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.MirrorX">
            <summary>
            Flip the image along the x-axis
            </summary>
            <returns>Pixel matrix symmetrical to that of the current instance relative to the x-axis</returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.MirrorY">
            <summary>
            Flip the image along the y-axis
            </summary>
            <returns>Pixel matrix symmetrical to that of the current instance relative to the y-axis</returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.Scale(System.Single)">
            <summary>
            Enlarges or shrinks the current image according to the factor passed in parameter
            </summary>
            <param name="ratio">scale factor: float strictly greater than 0</param>
            <returns>Pixel matrix enlarged if ratio > 1 and reduced if ratio is between 0 and 1</returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.Rotate(System.Int32)">
            <summary>
            Rotates the pixel matrix of the current MyImage instance, clockwise (-) and counter-clockwise (+)
            </summary>
            <param name="angle">angle (in degrees) to use when rotating (negative for clockwise)</param>
            <returns></returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.Convolve(System.Single[0:,0:])">
            <summary>
            Applies a convolution to the image of the current instance
            </summary>
            <param name="filter">Kernel to use when convolving</param>
            <returns></returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.Blur">
            <summary>
            Applies a blur effect to the current image
            </summary>
            <returns></returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.EdgeDetection">
            <summary>
            Applies the "edge detection" effect on the current image
            </summary>
            <returns></returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.Sharpening">
            <summary>
            Applies the "Sharpening" effect to the current image
            </summary>
            <returns>Pixel matrix corresponding to a sharper image than the original</returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.Embossing">
            <summary>
            Reinforce the edges of within an image
            </summary>
            <returns></returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.Histogram">
            <summary>
            Generates a histogram of all the colors in the image
            </summary>
            <returns>Pixel matrix representing an RGB histogram of an image</returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.Histogram(System.String)">
            <summary>
            Generates a histogram based on the image of the current instance and the submitted color
            </summary>
            <param name="color">Color on which the histogram will be based</param>
            <returns></returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.EncodeImage(PSI_Joyce.Pixel[0:,0:])">
            <summary>
            Hide an image within another
            </summary>
            <param name="mat">Image to hide in current instance</param>
            <returns></returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.DecodeImage">
            <summary>
            Retrieves an image hidden in another, if there is one
            </summary>
            <returns>The hidden image within the current instance</returns>
        </member>
        <member name="M:PSI_Joyce.MyImage.Fractal(System.String)">
            <summary>
            Generates a fractal from a selection
            </summary>
            <param name="type">type of the desired fractal</param>
            <returns>Image (Pixel matrix) representing a fractal</returns>
        </member>
        <member name="T:PSI_Joyce.Pixel">
            <summary>
            Class managing the operation of pixels
            </summary>
        </member>
        <member name="P:PSI_Joyce.Pixel.Red">
            <summary>
            Pixel red component
            </summary>
        </member>
        <member name="P:PSI_Joyce.Pixel.Green">
            <summary>
            Pixel green component
            </summary>
        </member>
        <member name="P:PSI_Joyce.Pixel.Blue">
            <summary>
            Pixel blue component
            </summary>
        </member>
        <member name="P:PSI_Joyce.Pixel.Avrg">
            <summary>
            The average of the three color components
            </summary>
        </member>
        <member name="P:PSI_Joyce.Pixel.Item(System.Int32)">
            <summary>
            Indexer declaration of the Pixel class
            </summary>
            <param name="n">0 : Red component; 1 : Green component; 2 : Blue component</param>
            <returns>Byte corresponding to the selected componente</returns>
        </member>
        <member name="P:PSI_Joyce.Pixel.Black">
            <summary>
            Pixel representing the black color
            </summary>
        </member>
        <member name="P:PSI_Joyce.Pixel.White">
            <summary>
            Pixel representing the white color
            </summary>
        </member>
        <member name="P:PSI_Joyce.Pixel.BlueColor">
            <summary>
            Pixel representing the blue color
            </summary>
        </member>
        <member name="M:PSI_Joyce.Pixel.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructs a Pixel with a triplet of bytes corresponding to the red, green and blue components of a color
            </summary>
            <param name="red">Red component of the Pixel, between 0 and 255</param>
            <param name="green">Green component of the Pixel, between 0 and 255</param>
            <param name="blue">Blue component of the Pixel, between 0 and 255</param>
        </member>
        <member name="M:PSI_Joyce.Pixel.op_Equality(PSI_Joyce.Pixel,PSI_Joyce.Pixel)">
            <summary>
            Checks if two instances of Pixel are equal
            </summary>
            <param name="a">First pixel (comparator)</param>
            <param name="b">Second pixel (compared)</param>
            <returns>True if the two Pixels are the same, False otherwise</returns>
        </member>
        <member name="M:PSI_Joyce.Pixel.op_Inequality(PSI_Joyce.Pixel,PSI_Joyce.Pixel)">
            <summary>
            Checks if two Pixel instances are different
            </summary>
            <param name="a">First pixel (comparator)</param>
            <param name="b">Second pixel (compared)</param>
            <returns>True if the two Pixels are different, False otherwise</returns>
        </member>
        <member name="M:PSI_Joyce.Pixel.ReadPixel(System.Collections.Generic.Queue{System.Byte})">
            <summary>
            
            </summary>
            <param name="queue">Queue containing all the bytes of the bitmap image</param>
            <returns>Pixel corresponding to the first three bytes in the Queue passed in parameters</returns>
        </member>
        <member name="M:PSI_Joyce.Pixel.XOR(PSI_Joyce.Pixel,PSI_Joyce.Pixel)">
            <summary>
            Applies the "Exclusive Or" logical operation
            </summary>
            <param name="a">First entry</param>
            <param name="b">Second entry</param>
            <returns>Black Pixel if the two inputs are different, white Pixel otherwise</returns>
        </member>
        <member name="M:PSI_Joyce.Pixel.Grayscale">
            <summary>
            Colors the current pixel in shades of gray
            </summary>
            <returns>Greyscale Pixel</returns>
        </member>
        <member name="M:PSI_Joyce.Pixel.Negative">
            <summary>
            Applies the "Negative" effect to the current instance of Pixel
            </summary>
            <returns>Pixel corresponding to the inverse color of the base Pixel</returns>
        </member>
        <member name="T:PSI_Joyce.Program">
            <summary>
            
            </summary>
        </member>
        <member name="M:PSI_Joyce.Program.AfficheTableau(System.Byte[])">
            <summary>
            Affiche un tableau de bytes (méthode utilisée dans les tests)
            </summary>
            <param name="tab">tableau de bytes à afficher</param>
            <returns></returns>
        </member>
        <member name="M:PSI_Joyce.Program.AfficheTableau(System.String[])">
            <summary>
            Affiche un tableau de string (méthode utilisée dans les tests)
            </summary>
            <param name="tab">tableau de chaînes de caractères à afficher</param>
            <returns></returns>
        </member>
        <member name="T:PSI_Joyce.QRCode">
            <summary>
            Class managing the operation of a QRCode
            </summary>
        </member>
        <member name="P:PSI_Joyce.QRCode.Character">
            <summary>
            Set of characters taken into account by the alphanumeric mode
            </summary>
        </member>
        <member name="P:PSI_Joyce.QRCode.Code">
            <summary>
            Image of the final QR Code
            </summary>
        </member>
        <member name="P:PSI_Joyce.QRCode.BitChain">
            <summary>
            Set of bits to be encoded in the final image to be returned
            </summary>
        </member>
        <member name="P:PSI_Joyce.QRCode.Mask">
            <summary>
            Pixel matrix corresponding to the mask to apply to the QRCode
            </summary>
        </member>
        <member name="M:PSI_Joyce.QRCode.#ctor(System.String)">
            <summary>
            Creates a QR Code instance from a character string
            </summary>
            <param name="data">Word to convert to QR Code</param>
        </member>
        <member name="M:PSI_Joyce.QRCode.FindIndex(System.Char)">
            <summary>
            Finds the index at which the letter passed in parameters is found in the char array of available characters in alphanumeric mode
            </summary>
            <param name="lettre">Character to look for in the array</param>
            <returns>An integer corresponding to the space occupied by the letter</returns>
        </member>
        <member name="M:PSI_Joyce.QRCode.GetPairs">
            <summary>
            Separates the word to be transcribed into QRCode in pairs
            </summary>
            <returns>Array of string where each index contains a string of two characters (or only one for the last index depending on the case)</returns>
        </member>
        <member name="M:PSI_Joyce.QRCode.Binary(System.String)">
            <summary>
            Gives the binary number corresponding to the pair of characters passed in parameters
            </summary>
            <param name="pair">Two characters to transcribe in base 2</param>
            <returns></returns>
        </member>
        <member name="M:PSI_Joyce.QRCode.PrintCode">
            <summary>
            Applies a one-pixel padding to the QRCode
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
